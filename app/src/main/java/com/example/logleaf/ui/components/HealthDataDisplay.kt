package com.example.logleaf.ui.components

import android.util.Log
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import com.example.logleaf.R
import com.yourpackage.logleaf.ui.components.UserFontText

/**
 * ÂÅ•Â∫∑„Éá„Éº„ÇøÁî®„ÅÆ„Ç¢„Ç§„Ç≥„É≥ÊñáÂ≠ó„Ç≥„Éº„ÉâÔºàMaterial IconsÔºâ
 */
object HealthIcons {
    val EXERCISE = R.drawable.ic_exercise
    val SLEEP = R.drawable.ic_sleep
    val NAP = R.drawable.ic_nap
    val STEPS = R.drawable.ic_step
    val CALORIES = R.drawable.ic_burn
}

/**
 * ÂÅ•Â∫∑„Éá„Éº„Çø„ÅÆ„Éü„Éã„Éû„É´Ë°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */
@Composable
fun HealthDataDisplay(
    iconRes: Int,  // ImageVector ‚Üí Int („É™„ÇΩ„Éº„ÇπID)
    text: String,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            painter = painterResource(id = iconRes),
            contentDescription = null,
            modifier = Modifier
                .size((MaterialTheme.typography.bodyMedium.fontSize.value * 1.2).dp)
                .offset(y = 1.dp), // Â∞ë„Åó‰∏ã„Å´ÁßªÂãï
            tint = MaterialTheme.colorScheme.onSurface // ÊñáÂ≠óËâ≤„Å®Âêå„Åò
        )

        Spacer(modifier = Modifier.width(4.dp))

        UserFontText(
            text = text,
            style = MaterialTheme.typography.bodyMedium
        )
    }
}

/**
 * Áù°Áú†„Éá„Éº„ÇøË°®Á§∫
 */
@Composable
fun SleepDataDisplay(
    startTime: String,
    endTime: String,
    duration: String,
    iconRes: Int = HealthIcons.SLEEP, // „Éá„Éï„Ç©„É´„Éà„ÅØÈÄöÂ∏∏„ÅÆÁù°Áú†„Ç¢„Ç§„Ç≥„É≥
    modifier: Modifier = Modifier
) {
    HealthDataDisplay(
        iconRes = iconRes,
        text = "$startTime - $endTime ($duration)",
        modifier = modifier
    )
}

/**
 * ÈÅãÂãï„Éá„Éº„ÇøË°®Á§∫
 */
@Composable
fun ExerciseDataDisplay(
    exerciseType: String,
    duration: String,
    distance: String? = null,
    modifier: Modifier = Modifier
) {
    val displayText = if (distance != null) {
        "$exerciseType $duration $distance"
    } else {
        "$exerciseType $duration"
    }

    HealthDataDisplay(
        iconRes = HealthIcons.EXERCISE,
        text = displayText,
        modifier = modifier
    )
}

/**
 * Ê≠©Êï∞„Éá„Éº„ÇøË°®Á§∫
 */
@Composable
fun StepsDataDisplay(
    steps: Int,
    modifier: Modifier = Modifier
) {
    HealthDataDisplay(
        iconRes = HealthIcons.STEPS,
        text = "${steps.toString().replace(Regex("(\\d)(?=(\\d{3})+$)"), "$1,")}Ê≠©",
        modifier = modifier
    )
}

/**
 * „Ç´„É≠„É™„Éº„Éá„Éº„ÇøË°®Á§∫
 */
@Composable
fun CaloriesDataDisplay(
    calories: Int,
    modifier: Modifier = Modifier
) {
    HealthDataDisplay(
        iconRes = HealthIcons.CALORIES,
        text = "${calories.toString().replace(Regex("(\\d)(?=(\\d{3})+$)"), "$1,")}kcal",
        modifier = modifier
    )
}

/**
 * ÂÅ•Â∫∑„Éá„Éº„Çø„ÅÆÊäïÁ®ø„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâË°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÁîüÊàê
 */
@Composable
fun HealthPostDisplay(
    postText: String,
    modifier: Modifier = Modifier
) {
    // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ËøΩÂä†
    Log.d("HealthDisplay", "ÊäïÁ®ø„ÉÜ„Ç≠„Çπ„Éà: $postText")

    // ÊäïÁ®ø„ÉÜ„Ç≠„Çπ„Éà„ÇíËß£Êûê„Åó„Å¶ÈÅ©Âàá„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíË°®Á§∫
    when {
        // Áù°Áú†„Éá„Éº„Çø„ÅÆÂà§ÂÆö
        postText.contains("‚Üí") && (postText.contains("Áù°Áú†") || postText.contains("üåô")) -> {
            Log.d("HealthDisplay", "Áù°Áú†„Éá„Éº„Çø„Å®„Åó„Å¶Âà§ÂÆö")
            // ‰æã: "üåô 22:30 ‚Üí 06:45 (8h15m)"
            val timePattern = "(\\d{2}:\\d{2})\\s*‚Üí\\s*(\\d{2}:\\d{2})\\s*\\(([^)]+)\\)".toRegex()
            timePattern.find(postText)?.let { match ->
                val (startTime, endTime, duration) = match.destructured
                SleepDataDisplay(
                    startTime = startTime,
                    endTime = endTime,
                    duration = duration,
                    iconRes = HealthIcons.SLEEP, // ‚Üê „Åì„Åì„ÇÇËøΩÂä†
                    modifier = modifier
                )
            } ?: run {
                Log.d("HealthDisplay", "Áù°Áú†„Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅÂ§±Êïó")
                // „Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„ÉàË°®Á§∫
                UserFontText(
                    text = postText,
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = modifier
                )
            }
        }

        // ‰ªÆÁú†„Éá„Éº„Çø„ÅÆÂà§ÂÆöÔºà„Äå‰ªÆÁú†„ÄçÊñáÂ≠ó„Å™„Åó„ÅßË°®Á§∫Ôºâ
        postText.contains("‰ªÆÁú†") -> {
            Log.d("HealthDisplay", "‰ªÆÁú†„Éá„Éº„Çø„Å®„Åó„Å¶Âà§ÂÆö")
            val napPattern = "(\\d{2}:\\d{2})\\s*‚Üí\\s*(\\d{2}:\\d{2})\\s*\\(([^)]+)\\)".toRegex()
            napPattern.find(postText)?.let { match ->
                val (startTime, endTime, duration) = match.destructured
                SleepDataDisplay(
                    startTime = startTime,
                    endTime = endTime,
                    duration = duration,
                    iconRes = HealthIcons.NAP, // ‚Üê „Åì„Åì„ÇíËøΩÂä†
                    modifier = modifier
                )
            }
        }

        // ÈÅãÂãï„Éá„Éº„Çø„ÅÆÂà§ÂÆö
        postText.contains("„É©„É≥„Éã„É≥„Ç∞") || postText.contains("üèÉ") -> {
            Log.d("HealthDisplay", "ÈÅãÂãï„Éá„Éº„Çø„Å®„Åó„Å¶Âà§ÂÆö")
            // ‰æã: "üèÉ‚Äç‚ôÇÔ∏è „É©„É≥„Éã„É≥„Ç∞ 30ÂàÜ\nË∑ùÈõ¢: 2.5km"
            val lines = postText.lines()
            val firstLine = lines.firstOrNull() ?: ""

            val exercisePattern = "(\\w+)\\s+(\\d+ÂàÜ?)".toRegex()
            val distancePattern = "Ë∑ùÈõ¢:\\s*([\\d.]+km)".toRegex()

            exercisePattern.find(firstLine)?.let { match ->
                val (exerciseType, duration) = match.destructured
                val distance = distancePattern.find(postText)?.groupValues?.get(1)

                ExerciseDataDisplay(
                    exerciseType = exerciseType,
                    duration = duration,
                    distance = distance,
                    modifier = modifier
                )
            }
        }

        // „Éá„Ç§„É™„ÉºÂÅ•Â∫∑„Éá„Éº„Çø„ÅÆÂà§ÂÆöÔºàÊ≠©Êï∞ + „Ç´„É≠„É™„ÉºÔºâ
        postText.contains("Ê≠©") && postText.contains("kcal") -> {
            Log.d("HealthDisplay", "„Éá„Ç§„É™„ÉºÂÅ•Â∫∑„Éá„Éº„Çø„Å®„Åó„Å¶Âà§ÂÆö")
            // ‰æã: "üìä ‰ªäÊó•„ÅÆÂÅ•Â∫∑„Éá„Éº„Çø\nüëü Ê≠©Êï∞: 8,542Ê≠©\nüî• Ê∂àË≤ª„Ç´„É≠„É™„Éº: 1,850kcal"
            val stepsPattern = "([\\d,]+)Ê≠©".toRegex()
            val caloriesPattern = "([\\d,]+)kcal".toRegex()

            val stepsMatch = stepsPattern.find(postText)
            val caloriesMatch = caloriesPattern.find(postText)

            if (stepsMatch != null && caloriesMatch != null) {
                val stepsStr = stepsMatch.groupValues[1].replace(",", "")
                val caloriesStr = caloriesMatch.groupValues[1].replace(",", "")
                val steps = stepsStr.toIntOrNull() ?: 0
                val calories = caloriesStr.toIntOrNull() ?: 0

                // Ê≠©Êï∞„Å®„Ç´„É≠„É™„Éº„Çí‰∏¶„Åπ„Å¶Ë°®Á§∫
                Row(
                    modifier = modifier,
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    StepsDataDisplay(
                        steps = steps,
                        modifier = Modifier
                    )
                    CaloriesDataDisplay(
                        calories = calories,
                        modifier = Modifier
                    )
                }
            }
        }

        // Ê≠©Êï∞„Éá„Éº„Çø„ÅÆ„Åø„ÅÆÂà§ÂÆö
        postText.contains("Ê≠©") -> {
            Log.d("HealthDisplay", "Ê≠©Êï∞„Éá„Éº„Çø„Å®„Åó„Å¶Âà§ÂÆö")
            val stepsPattern = "([\\d,]+)Ê≠©".toRegex()
            stepsPattern.find(postText)?.let { match ->
                val stepsStr = match.groupValues[1].replace(",", "")
                val steps = stepsStr.toIntOrNull() ?: 0
                StepsDataDisplay(
                    steps = steps,
                    modifier = modifier
                )
            }
        }

        // „Ç´„É≠„É™„Éº„Éá„Éº„Çø„ÅÆ„Åø„ÅÆÂà§ÂÆö
        postText.contains("kcal") -> {
            Log.d("HealthDisplay", "„Ç´„É≠„É™„Éº„Éá„Éº„Çø„Å®„Åó„Å¶Âà§ÂÆö")
            val caloriesPattern = "([\\d,]+)kcal".toRegex()
            caloriesPattern.find(postText)?.let { match ->
                val caloriesStr = match.groupValues[1].replace(",", "")
                val calories = caloriesStr.toIntOrNull() ?: 0
                CaloriesDataDisplay(
                    calories = calories,
                    modifier = modifier
                )
            }
        }

        // „Éá„Éï„Ç©„É´„Éà: ÈÄöÂ∏∏„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàË°®Á§∫
        else -> {
            Log.d("HealthDisplay", "ÈÄöÂ∏∏„ÉÜ„Ç≠„Çπ„Éà„Å®„Åó„Å¶Ë°®Á§∫")
            UserFontText(
                text = postText,
                style = MaterialTheme.typography.bodyMedium,
                modifier = modifier
            )
        }
    }
}
